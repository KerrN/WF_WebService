//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace webServiceTestForm.wf_service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SOAP_ResolvePath", Namespace="http://schemas.datacontract.org/2004/07/WF_webService")]
    [System.SerializableAttribute()]
    public partial class SOAP_ResolvePath : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string buildingImagek__BackingFieldField;
        
        private string buildingTitlek__BackingFieldField;
        
        private double[] campusTok__BackingFieldField;
        
        private string[][] mapsk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<buildingImage>k__BackingField", IsRequired=true)]
        public string buildingImagek__BackingField {
            get {
                return this.buildingImagek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.buildingImagek__BackingFieldField, value) != true)) {
                    this.buildingImagek__BackingFieldField = value;
                    this.RaisePropertyChanged("buildingImagek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<buildingTitle>k__BackingField", IsRequired=true)]
        public string buildingTitlek__BackingField {
            get {
                return this.buildingTitlek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.buildingTitlek__BackingFieldField, value) != true)) {
                    this.buildingTitlek__BackingFieldField = value;
                    this.RaisePropertyChanged("buildingTitlek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<campusTo>k__BackingField", IsRequired=true)]
        public double[] campusTok__BackingField {
            get {
                return this.campusTok__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.campusTok__BackingFieldField, value) != true)) {
                    this.campusTok__BackingFieldField = value;
                    this.RaisePropertyChanged("campusTok__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<maps>k__BackingField", IsRequired=true)]
        public string[][] mapsk__BackingField {
            get {
                return this.mapsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.mapsk__BackingFieldField, value) != true)) {
                    this.mapsk__BackingFieldField = value;
                    this.RaisePropertyChanged("mapsk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Waypoint", Namespace="http://schemas.datacontract.org/2004/07/WF_webService")]
    [System.SerializableAttribute()]
    public partial class Waypoint : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int buildingIDk__BackingFieldField;
        
        private double coordXk__BackingFieldField;
        
        private double coordYk__BackingFieldField;
        
        private int floorIDk__BackingFieldField;
        
        private string roomNamek__BackingFieldField;
        
        private string transitionModek__BackingFieldField;
        
        private int waypointIDPrevDisk__BackingFieldField;
        
        private int waypointIDPrevk__BackingFieldField;
        
        private int waypointIDk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<buildingID>k__BackingField", IsRequired=true)]
        public int buildingIDk__BackingField {
            get {
                return this.buildingIDk__BackingFieldField;
            }
            set {
                if ((this.buildingIDk__BackingFieldField.Equals(value) != true)) {
                    this.buildingIDk__BackingFieldField = value;
                    this.RaisePropertyChanged("buildingIDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<coordX>k__BackingField", IsRequired=true)]
        public double coordXk__BackingField {
            get {
                return this.coordXk__BackingFieldField;
            }
            set {
                if ((this.coordXk__BackingFieldField.Equals(value) != true)) {
                    this.coordXk__BackingFieldField = value;
                    this.RaisePropertyChanged("coordXk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<coordY>k__BackingField", IsRequired=true)]
        public double coordYk__BackingField {
            get {
                return this.coordYk__BackingFieldField;
            }
            set {
                if ((this.coordYk__BackingFieldField.Equals(value) != true)) {
                    this.coordYk__BackingFieldField = value;
                    this.RaisePropertyChanged("coordYk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<floorID>k__BackingField", IsRequired=true)]
        public int floorIDk__BackingField {
            get {
                return this.floorIDk__BackingFieldField;
            }
            set {
                if ((this.floorIDk__BackingFieldField.Equals(value) != true)) {
                    this.floorIDk__BackingFieldField = value;
                    this.RaisePropertyChanged("floorIDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<roomName>k__BackingField", IsRequired=true)]
        public string roomNamek__BackingField {
            get {
                return this.roomNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.roomNamek__BackingFieldField, value) != true)) {
                    this.roomNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("roomNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<transitionMode>k__BackingField", IsRequired=true)]
        public string transitionModek__BackingField {
            get {
                return this.transitionModek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.transitionModek__BackingFieldField, value) != true)) {
                    this.transitionModek__BackingFieldField = value;
                    this.RaisePropertyChanged("transitionModek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<waypointIDPrevDis>k__BackingField", IsRequired=true)]
        public int waypointIDPrevDisk__BackingField {
            get {
                return this.waypointIDPrevDisk__BackingFieldField;
            }
            set {
                if ((this.waypointIDPrevDisk__BackingFieldField.Equals(value) != true)) {
                    this.waypointIDPrevDisk__BackingFieldField = value;
                    this.RaisePropertyChanged("waypointIDPrevDisk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<waypointIDPrev>k__BackingField", IsRequired=true)]
        public int waypointIDPrevk__BackingField {
            get {
                return this.waypointIDPrevk__BackingFieldField;
            }
            set {
                if ((this.waypointIDPrevk__BackingFieldField.Equals(value) != true)) {
                    this.waypointIDPrevk__BackingFieldField = value;
                    this.RaisePropertyChanged("waypointIDPrevk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<waypointID>k__BackingField", IsRequired=true)]
        public int waypointIDk__BackingField {
            get {
                return this.waypointIDk__BackingFieldField;
            }
            set {
                if ((this.waypointIDk__BackingFieldField.Equals(value) != true)) {
                    this.waypointIDk__BackingFieldField = value;
                    this.RaisePropertyChanged("waypointIDk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="wf_service.WF_Service_Interface")]
    public interface WF_Service_Interface {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/checkServiceConn", ReplyAction="http://tempuri.org/WF_Service_Interface/checkServiceConnResponse")]
        bool checkServiceConn();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/checkServiceConn", ReplyAction="http://tempuri.org/WF_Service_Interface/checkServiceConnResponse")]
        System.Threading.Tasks.Task<bool> checkServiceConnAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/checkDBConn", ReplyAction="http://tempuri.org/WF_Service_Interface/checkDBConnResponse")]
        bool checkDBConn();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/checkDBConn", ReplyAction="http://tempuri.org/WF_Service_Interface/checkDBConnResponse")]
        System.Threading.Tasks.Task<bool> checkDBConnAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/getImage", ReplyAction="http://tempuri.org/WF_Service_Interface/getImageResponse")]
        byte[] getImage(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/getImage", ReplyAction="http://tempuri.org/WF_Service_Interface/getImageResponse")]
        System.Threading.Tasks.Task<byte[]> getImageAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/SearchCampus", ReplyAction="http://tempuri.org/WF_Service_Interface/SearchCampusResponse")]
        string[][] SearchCampus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/SearchCampus", ReplyAction="http://tempuri.org/WF_Service_Interface/SearchCampusResponse")]
        System.Threading.Tasks.Task<string[][]> SearchCampusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/CampusVersion", ReplyAction="http://tempuri.org/WF_Service_Interface/CampusVersionResponse")]
        int CampusVersion(string CampusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/CampusVersion", ReplyAction="http://tempuri.org/WF_Service_Interface/CampusVersionResponse")]
        System.Threading.Tasks.Task<int> CampusVersionAsync(string CampusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/SearchRooms", ReplyAction="http://tempuri.org/WF_Service_Interface/SearchRoomsResponse")]
        System.Collections.Generic.SortedList<int, string> SearchRooms(string CampusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/SearchRooms", ReplyAction="http://tempuri.org/WF_Service_Interface/SearchRoomsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.SortedList<int, string>> SearchRoomsAsync(string CampusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/SearchServices", ReplyAction="http://tempuri.org/WF_Service_Interface/SearchServicesResponse")]
        System.Collections.Generic.SortedList<int, string> SearchServices(string CampusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/SearchServices", ReplyAction="http://tempuri.org/WF_Service_Interface/SearchServicesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.SortedList<int, string>> SearchServicesAsync(string CampusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/ResolvePath", ReplyAction="http://tempuri.org/WF_Service_Interface/ResolvePathResponse")]
        webServiceTestForm.wf_service.SOAP_ResolvePath ResolvePath(int WaypointID, bool Disability);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/ResolvePath", ReplyAction="http://tempuri.org/WF_Service_Interface/ResolvePathResponse")]
        System.Threading.Tasks.Task<webServiceTestForm.wf_service.SOAP_ResolvePath> ResolvePathAsync(int WaypointID, bool Disability);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/GetResolvePathLists", ReplyAction="http://tempuri.org/WF_Service_Interface/GetResolvePathListsResponse")]
        webServiceTestForm.wf_service.Waypoint[][] GetResolvePathLists(int WaypointID, bool Disability);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/GetResolvePathLists", ReplyAction="http://tempuri.org/WF_Service_Interface/GetResolvePathListsResponse")]
        System.Threading.Tasks.Task<webServiceTestForm.wf_service.Waypoint[][]> GetResolvePathListsAsync(int WaypointID, bool Disability);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/RunImageProcessor", ReplyAction="http://tempuri.org/WF_Service_Interface/RunImageProcessorResponse")]
        string RunImageProcessor(string roomName, webServiceTestForm.wf_service.Waypoint[] sequence, int xanchor, int yacnhor, double scale);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/RunImageProcessor", ReplyAction="http://tempuri.org/WF_Service_Interface/RunImageProcessorResponse")]
        System.Threading.Tasks.Task<string> RunImageProcessorAsync(string roomName, webServiceTestForm.wf_service.Waypoint[] sequence, int xanchor, int yacnhor, double scale);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/UpdateMaps", ReplyAction="http://tempuri.org/WF_Service_Interface/UpdateMapsResponse")]
        void UpdateMaps();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WF_Service_Interface/UpdateMaps", ReplyAction="http://tempuri.org/WF_Service_Interface/UpdateMapsResponse")]
        System.Threading.Tasks.Task UpdateMapsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WF_Service_InterfaceChannel : webServiceTestForm.wf_service.WF_Service_Interface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WF_Service_InterfaceClient : System.ServiceModel.ClientBase<webServiceTestForm.wf_service.WF_Service_Interface>, webServiceTestForm.wf_service.WF_Service_Interface {
        
        public WF_Service_InterfaceClient() {
        }
        
        public WF_Service_InterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WF_Service_InterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WF_Service_InterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WF_Service_InterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool checkServiceConn() {
            return base.Channel.checkServiceConn();
        }
        
        public System.Threading.Tasks.Task<bool> checkServiceConnAsync() {
            return base.Channel.checkServiceConnAsync();
        }
        
        public bool checkDBConn() {
            return base.Channel.checkDBConn();
        }
        
        public System.Threading.Tasks.Task<bool> checkDBConnAsync() {
            return base.Channel.checkDBConnAsync();
        }
        
        public byte[] getImage(string path) {
            return base.Channel.getImage(path);
        }
        
        public System.Threading.Tasks.Task<byte[]> getImageAsync(string path) {
            return base.Channel.getImageAsync(path);
        }
        
        public string[][] SearchCampus() {
            return base.Channel.SearchCampus();
        }
        
        public System.Threading.Tasks.Task<string[][]> SearchCampusAsync() {
            return base.Channel.SearchCampusAsync();
        }
        
        public int CampusVersion(string CampusID) {
            return base.Channel.CampusVersion(CampusID);
        }
        
        public System.Threading.Tasks.Task<int> CampusVersionAsync(string CampusID) {
            return base.Channel.CampusVersionAsync(CampusID);
        }
        
        public System.Collections.Generic.SortedList<int, string> SearchRooms(string CampusID) {
            return base.Channel.SearchRooms(CampusID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.SortedList<int, string>> SearchRoomsAsync(string CampusID) {
            return base.Channel.SearchRoomsAsync(CampusID);
        }
        
        public System.Collections.Generic.SortedList<int, string> SearchServices(string CampusID) {
            return base.Channel.SearchServices(CampusID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.SortedList<int, string>> SearchServicesAsync(string CampusID) {
            return base.Channel.SearchServicesAsync(CampusID);
        }
        
        public webServiceTestForm.wf_service.SOAP_ResolvePath ResolvePath(int WaypointID, bool Disability) {
            return base.Channel.ResolvePath(WaypointID, Disability);
        }
        
        public System.Threading.Tasks.Task<webServiceTestForm.wf_service.SOAP_ResolvePath> ResolvePathAsync(int WaypointID, bool Disability) {
            return base.Channel.ResolvePathAsync(WaypointID, Disability);
        }
        
        public webServiceTestForm.wf_service.Waypoint[][] GetResolvePathLists(int WaypointID, bool Disability) {
            return base.Channel.GetResolvePathLists(WaypointID, Disability);
        }
        
        public System.Threading.Tasks.Task<webServiceTestForm.wf_service.Waypoint[][]> GetResolvePathListsAsync(int WaypointID, bool Disability) {
            return base.Channel.GetResolvePathListsAsync(WaypointID, Disability);
        }
        
        public string RunImageProcessor(string roomName, webServiceTestForm.wf_service.Waypoint[] sequence, int xanchor, int yacnhor, double scale) {
            return base.Channel.RunImageProcessor(roomName, sequence, xanchor, yacnhor, scale);
        }
        
        public System.Threading.Tasks.Task<string> RunImageProcessorAsync(string roomName, webServiceTestForm.wf_service.Waypoint[] sequence, int xanchor, int yacnhor, double scale) {
            return base.Channel.RunImageProcessorAsync(roomName, sequence, xanchor, yacnhor, scale);
        }
        
        public void UpdateMaps() {
            base.Channel.UpdateMaps();
        }
        
        public System.Threading.Tasks.Task UpdateMapsAsync() {
            return base.Channel.UpdateMapsAsync();
        }
    }
}
